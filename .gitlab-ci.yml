stages:
  - unittests
  - mirror
  - release
  - deploy

variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  MAVEN_CLI_OPTS: "-s $CI_PROJECT_DIR/.m2/settings.xml --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
  # Postgres
  POSTGRES_DB: postgres
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: "YourSTRONG!Passw0rd"
  # SQLServer
  ACCEPT_EULA: "Y"
  SA_PASSWORD: "YourSTRONG!Passw0rd"
  # https://hub.docker.com/r/alpine/git/tags
  GIT_VERSION: v2.32.0

cache:
  key: ${CI_JOB_NAME}
  paths:
    - .m2/repository

# Cancel pipeline if a newer pipeline is running
default:
    interruptible: true

###############################
#                             #
#     Unittests               #
#                             #
###############################

General:
  stage: unittests
  image: maven:3.5.0-jdk-8
  retry: 2
  services:
    - postgres:10.4
    - name: mcr.microsoft.com/mssql/server:latest
      alias: sqlserver
  script:
    - 'mvn $MAVEN_CLI_OPTS -Dtest=!Mapper_OracleDB_Test test'
  except:
    - master
    - development

Oracle DB:
  stage: unittests
  image: gitlab.ilabt.imec.be:4567/rml/util/mvn-oracle-docker:latest
  script:
    - '/entrypoint.sh'
  except:
    - master
    - development
    - tags # Gitlab CI bot cannot access Docker images

Docker Build:
  stage: unittests
  image: docker:latest
  services:
    - docker:19.03.12-dind
  before_script:
    - docker info
  script:
    - docker build -t rmlmapper .
  except:
    - master
    - development

###############################
#                             #
#     Automated Releases      #
#                             #
###############################

# Bump version, create changelog, commit changes to master
# Only happens when manually clicked in the CI pipeline
# Thanks to: https://www.benjaminrancourt.ca/how-to-push-to-a-git-repository-from-a-gitlab-ci-pipeline
# Description
#   This script allows to store the artefacts of a step into the current
#   repository, to improve the efficiency of the next build process.

# Set up this script
#   1. Create a new personal access token (https://gitlab.com/-/profile/personal_access_tokens)
#      with the following scopes:
#        - read_repository
#        - write_repository
#   2. Inside Settings -> CI / CD -> Variables, create the following variables:
#
#   GITLAB_TOKEN          Personal access token previously created.             XGE2-k445hd5fbs94v9d
#     (masked)
#   GITLAB_USERNAME       Username associated with the personal access token.   ranb2002
#   COMMIT_MESSAGE        Commit message                                        Automatic update from the weekly schedule

# Other variables used by this script
#   The following variables are defined automatically by GitLab CI. Thus, you
#   don't need to override them.
#
#   CI_COMMIT_SHA         Commit SHA, to use a unique directory name.           e46f153dd47ce5f3ca8c56be3fb5d55039853655
#   CI_DEFAULT_BRANCH     Default branch.                                       main
#   CI_PROJECT_PATH       Current project path.                                 ranb2002/benjaminrancourt.ca
#   CI_SERVER_HOST        Hostname of the current GitLab instance.              gitlab.com
#   GITLAB_USER_EMAIL     Email of the user used to commit the changes to the   ranb2002@gitlab.com
#                         secondary repository.
#   GITLAB_USER_NAME      User name of the user used to commit the changes to   Benjamin Rancourt
#                         the secondary repository.
#
Create Release:
  image:
    entrypoint: ['']
    name: alpine/git:${GIT_VERSION}
  stage: release
  before_script:
    # Dependencies
    - apk add maven java-jdk
    # Clone the repository via HTTPS inside a new directory
    - git clone "https://${GITLAB_USERNAME}:${GITLAB_TOKEN_RMLMAPPER}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git" "${CI_COMMIT_SHA}"

    # Set the displayed user with the commits that are about to be made
    - git config --global user.email "${GIT_USER_EMAIL:-$GITLAB_USER_EMAIL}"
    - git config --global user.name "${GIT_USER_NAME:-$GITLAB_USER_NAME}"
  script:
    # Using before_script would override .git:push template
    # User has to set the RELEASE_TAG_NAME variable
    - if [ -z "$RELEASE_TAG_NAME" ]; then exit 1; else echo "Creating release v$RELEASE_TAG_NAME"; fi
    # Install dependencies
    - apk add nodejs npm
    - npm install -g changefrog

    # Update pom.xml
    - head -n6 pom.xml | sed "/<version>/s/>.*</>$RELEASE_TAG_NAME</" > pom_updated.xml
    - tail -n +7 pom.xml >> pom_updated.xml 
    - mv pom_updated.xml pom.xml  
    # Update changelog. Changefrog does not like vX.X.X so drop 'v'
    - changefrog -n "$RELEASE_TAG_NAME"
    # Build a Jar
    - mvn install -DskipTests=true
    # Stage changes for commit to master
    - cp -u pom.xml "${CI_COMMIT_SHA}/pom.xml"
    - cp -u CHANGELOG.md "${CI_COMMIT_SHA}/CHANGELOG.md"
    - cp -u buildNumber.properties "${CI_COMMIT_SHA}/buildNumber.properties"
  after_script:
    # Go to the new directory
    - cd "${CI_COMMIT_SHA}"

    # Add all generated files to Git
    - git add .
    - |-
      # Check if we have modifications to commit
      CHANGES=$(git status --porcelain | wc -l)

      if [ "$CHANGES" -gt "0" ]; then
        # Show the status of files that are about to be created, updated or deleted
        git diff --cached --shortstat

        # Commit all changes
        COMMIT_MESSAGE="CHANGELOG: release v$RELEASE_TAG_NAME"
        echo "Commit message: ${COMMIT_MESSAGE}"
        git commit -m "${COMMIT_MESSAGE}"

        # Create git tag
        git tag "v$RELEASE_TAG_NAME"

        # Update the repository and make sure to skip the pipeline create for this commit
        git push origin "${CI_DEFAULT_BRANCH}"
        # Push new tags and trigger the pipeline since we're deploying
        git push --tags origin "${CI_DEFAULT_BRANCH}"

        # Also release on the master branch
        git checkout master
        git rebase "${CI_DEFAULT_BRANCH}"
        git push origin master
      fi
  when: manual

# Push Docker image of the latest master branch to Docker Hub
# Updates 'latest' and the last git tag that is available
# Only triggered when a deployment is done from development -> master (manual)
Docker Hub:
  stage: deploy
  image: docker:latest
  variables:
    DOCKER_IMAGE_NAME: "rmlio/rmlmapper-java"
  services:
    - docker:19.03.12-dind
  before_script:
    - apk add git
    - docker login -u "$DOCKER_HUB_USER" -p "$DOCKER_HUB_PASSWORD" docker.io
  script:
    # Docker 'latest' tag
    - echo "Deploying image $DOCKER_IMAGE_NAME":latest
    - docker build -t "$DOCKER_IMAGE_NAME":latest .
    - docker push "$DOCKER_IMAGE_NAME":latest
    # Get latest git tag and push it as well
    - echo "Deploying image $DOCKER_IMAGE_NAME":$(git tag -l "v*" --sort=-creatordate | head -n1)
    - docker build -t "$DOCKER_IMAGE_NAME":$(git tag -l "v*" --sort=-creatordate | head -n1) .
    - docker push "$DOCKER_IMAGE_NAME":$(git tag -l "v*" --sort=-creatordate | head -n1)
  only:
    - tags

# Create Github Releases on new tags
Github Release:
  stage: deploy
  image: maven:3.5.0-jdk-8
  before_script:
    # Clone the repository via HTTPS inside a new directory
    - git clone "https://${GITLAB_USERNAME}:${GITLAB_TOKEN_RMLMAPPER}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git" "${CI_COMMIT_SHA}"

    # Set the displayed user with the commits that are about to be made
    - git config --global user.email "${GIT_USER_EMAIL:-$GITLAB_USER_EMAIL}"
    - git config --global user.name "${GIT_USER_NAME:-$GITLAB_USER_NAME}"

    # Install dependencies
    - apt update
    - apt install -y apt-transport-https
    - curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
    - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
    - apt update
    - apt install gh
  script:
    # Login into Github
    - gh auth login -s repo --with-token < $GITHUB_ACCESS_TOKEN_FILE
    # Build fat jar for Github Release
    - mvn install -DskipTests=true
    # Create Github Release
    - TAG=$(git tag -l "v*" --sort=-creatordate | head -n1)
    - CHANGES=$(./get-changes.sh)
    - echo "Creating Github release $TAG with changes\n$CHANGES"
    - gh release create "$TAG" -n "$CHANGES" -t "$TAG" -R "github.com/RMLio/rmlmapper-java" target/*.jar
  only:
    - tags

# Create a Maven Central release on new tags
# Thanks to https://1337codersblog.wordpress.com/2019/09/18/automatical-artifact-deployment-to-maven-central-using-gitlab-ci-part-1/
# Define the following CI variables:
# - MAVEN_REPO_USER: Maven user for deployment
# - MAVEN_REPO_PASSWORD: Maven password for deployment
# - GPG_SECRET_KEY: file with your secret key to sign things
# You can get these credentials by creating an user access token on oss.sonatype.org > Profile > User Token
Maven Central:
  stage: deploy
  image: maven:3.5.0-jdk-8
  before_script:
    - gpg --version
    - gpg --import --batch --yes $GPG_SECRET_KEY
  script:
    - mvn $MAVEN_CLI_OPTS clean deploy -P release -DskipTests=true
  only:
    - tags

# Generate R2RML test report and send MR to rml.io website
# Push options: https://docs.gitlab.com/ee/user/project/push_options.html
R2RML Test Report:
  stage: deploy
  image: docker:latest
  services:
    - docker:19.03.12-dind
  before_script:
    # Dependencies
    - apk add git python3 python3-dev py3-pip postgresql-dev postgresql libpq gcc musl-dev docker docker-compose java-jre-headless maven java-jdk

    # Clone the repository via HTTPS inside a new directory
    - git clone "https://${GITLAB_USERNAME}:${GITLAB_TOKEN_WEBSITE}@${CI_SERVER_HOST}/rml/doc/rmlio-website.git"
    - git clone "https://github.com/kg-construct/r2rml-test-cases-support"

    # Set the displayed user with the commits that are about to be made
    - git config --global user.email "${GIT_USER_EMAIL:-$GITLAB_USER_EMAIL}"
    - git config --global user.name "${GIT_USER_NAME:-$GITLAB_USER_NAME}"

    # Show docker
    - docker info
  script:
    # Variables
    - RELEASE_TAG_NAME=$(git tag -l "v*" --sort=-creatordate | head -n1)
    - RELEASE_TAG_NAME=$(echo "$RELEASE_TAG_NAME" | cut -c2-)
    - TODAY=$(date +"%Y-%m-%d")

    # Build RMLMapper jar
    - mvn install -DskipTests=true

    # Setup R2RML test cases configs
    - cp data/r2rml-test-cases-config-postgresql.ini r2rml-test-cases-support/config-postgresql.ini
    - cp data/r2rml-test-cases-config-mysql.ini r2rml-test-cases-support/config-mysql.ini
    - cd r2rml-test-cases-support
    - echo "Generating test report for release v${RELEASE_TAG_NAME} on ${TODAY}"
    - sed -i "s/VERSION/${RELEASE_TAG_NAME}/" config-postgresql.ini
    - sed -i "s/VERSION/${RELEASE_TAG_NAME}/" config-mysql.ini
    - sed -i "s/DATE/${TODAY}/" config-postgresql.ini
    - sed -i "s/DATE/${TODAY}/" config-mysql.ini

    # Install R2RML test cases dependencies
    - python3 -m pip install -r requirements.txt

    # Execute R2RML test cases
    - HOST=docker python3 test.py config-postgresql.ini
    - HOST=$(getent hosts docker | cut -f1 -d " ") python3 test.py config-mysql.ini # MySQL wants an IP address

    # Prepare MR for rml.io website
    - cp results.ttl ../rmlio-website/tools/rmlmapper/r2rml-test-cases-results.ttl
    - cd ..
  after_script:
    - RELEASE_TAG_NAME=$(git tag -l "v*" --sort=-creatordate | head -n1)
    - RELEASE_TAG_NAME=$(echo "$RELEASE_TAG_NAME" | cut -c2-)

    # Go to the new directory
    - cd rmlio-website

    # Add all generated files to Git
    - git add .
    - |-
      # Check if we have modifications to commit
      CHANGES=$(git status --porcelain | wc -l)
      BRANCH="rmlmapper/${RELEASE_TAG_NAME}"

      if [ "$CHANGES" -gt "0" ]; then
        # Show the status of files that are about to be created, updated or deleted
        git diff --cached --shortstat

        # Create new branch
        git checkout -b "${BRANCH}"

        # Commit all changes
        COMMIT_MESSAGE="tools/rmlmapper: update R2RML test report for RMLMapper ${RELEASE_TAG_NAME}"
        echo "Commit message: ${COMMIT_MESSAGE}"
        git commit -m "${COMMIT_MESSAGE}"

        # Update the repository and make sure to skip the pipeline create for this commit
        echo "Creating Merge Request of branch ${BRANCH}"
        git push origin "${BRANCH}" -o merge_request.create -o merge_request.remove_source_branch -o merge_request.title="${COMMIT_MESSAGE}"
      fi
  only:
    - tags

###############################
#                             #
#     Automated Mirroring     #
#                             #
###############################

# Sync internal Gitlab master & development branches and tags with public Github repo
# Make sure you configure the following CI variable: GITHUB_ACCESS_TOKEN
Github:
  stage: mirror
  image: 
    entrypoint: ['']
    name: alpine/git:${GIT_VERSION}
  before_script:
    # Set the displayed user with the commits that are about to be made
    - git config --global user.email "${GIT_USER_EMAIL:-$GITLAB_USER_EMAIL}"
    - git config --global user.name "${GIT_USER_NAME:-$GITLAB_USER_NAME}"
  script:
    - echo "Pushing to Github $CI_COMMIT_BRANCH branch"
    - git remote set-url origin "https://${GITHUB_ACCESS_TOKEN}@github.com/RMLio/rmlmapper-java.git"
    - git checkout "$CI_COMMIT_BRANCH"
    # Use --force to make sure we're in sync
    - git push --force origin "$CI_COMMIT_BRANCH"
    - git push --force --tags origin "$CI_COMMIT_BRANCH"
  only:
    - master
    - development
